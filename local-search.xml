<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Raid 1+0 操作步骤记录</title>
    <link href="/03/11/2014/raid_10/"/>
    <url>/03/11/2014/raid_10/</url>
    
    <content type="html"><![CDATA[<h3 id="操作结果"><a href="#操作结果" class="headerlink" title="操作结果"></a>操作结果</h3><p>所有机器磁盘挂载情况如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@HOST work]# <span class="hljs-built_in">df</span> -h<br>Filesystem            Size  Used Avail Use% Mounted on<br>/dev/sda2             8.2G  3.8G  4.4G  47% /<br>/dev/sda3             1.8T  1.7G  1.8T   1% /home<br>/dev/md10             8.9T  168M  8.4T   1% /home/data1<br></code></pre></td></tr></table></figure><h4 id="1-unmount正在使用的盘"><a href="#1-unmount正在使用的盘" class="headerlink" title="1. unmount正在使用的盘"></a>1. unmount正在使用的盘</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> `<span class="hljs-built_in">seq</span> 1 9`;<span class="hljs-keyword">do</span> umount /disk<span class="hljs-variable">$x</span>;<span class="hljs-keyword">done</span><br><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> `<span class="hljs-built_in">seq</span> 10 11`;<span class="hljs-keyword">do</span> umount /home/disk<span class="hljs-variable">$x</span>;<span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure><h4 id="2-raid-1方式做成5个2T的盘"><a href="#2-raid-1方式做成5个2T的盘" class="headerlink" title="2. raid 1方式做成5个2T的盘"></a>2. raid 1方式做成5个2T的盘</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">i=0<br><span class="hljs-keyword">for</span>  x <span class="hljs-keyword">in</span> bc de <span class="hljs-built_in">fg</span> hi jk ;<span class="hljs-keyword">do</span><br><span class="hljs-built_in">eval</span> mdadm -Cv /dev/md<span class="hljs-variable">$i</span> -l 1 -n2 /dev/sd[<span class="hljs-variable">$&#123;x&#125;</span>]1 &lt;&lt;<span class="hljs-string">EOF</span><br><span class="hljs-string">    y</span><br><span class="hljs-string">EOF</span><br>((i++))<br><span class="hljs-built_in">sleep</span> 3<br><span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure><h4 id="3-raid-0方式做成10T的大盘"><a href="#3-raid-0方式做成10T的大盘" class="headerlink" title="3. raid 0方式做成10T的大盘"></a>3. raid 0方式做成10T的大盘</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">mdadm -Cv /dev/md10 -l 0 -n5 /dev/md[0-4] &lt;&lt;<span class="hljs-string">EOF</span><br><span class="hljs-string">    y</span><br><span class="hljs-string">EOF</span><br></code></pre></td></tr></table></figure><h4 id="4-格式化md10为ext4"><a href="#4-格式化md10为ext4" class="headerlink" title="4. 格式化md10为ext4"></a>4. 格式化md10为ext4</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">mkfs -t ext4 /dev/md10<br></code></pre></td></tr></table></figure><h4 id="5-挂载大盘到-home-data1"><a href="#5-挂载大盘到-home-data1" class="headerlink" title="5. 挂载大盘到&#x2F;home&#x2F;data1"></a>5. 挂载大盘到&#x2F;home&#x2F;data1</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> /home/data1 &amp;&amp; mount -t ext4 /dev/md10 /home/data1/<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>raid</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ubuntu下搭建web svn</title>
    <link href="/03/04/2014/ubuntu_websvn/"/>
    <url>/03/04/2014/ubuntu_websvn/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>嗯，为了方便开发，需在VPS（环境为ubuntu 12.04）搭建svn服务。本文主要记录下搭建的整体步骤~</p><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><h3 id="安装svn"><a href="#安装svn" class="headerlink" title="安装svn"></a>安装svn</h3><p>过程主要参考：<a href="https://help.ubuntu.com/community/Subversion">https://help.ubuntu.com/community/Subversion</a></p><p>首先安装subversion </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> apt-get install subversion subversion-tools<br></code></pre></td></tr></table></figure><p>安装完成后，需建立<code>subversion</code>用户组来拥有资源目录，然后将nginx的用户添加到该用户组（假设nginx的配置为<code>user  www-data;</code>）,具体操作如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> groupadd subversion<br><span class="hljs-built_in">sudo</span> usermod -a -G subversion www-data<br><span class="hljs-comment">#验证</span><br><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">groups</span> www-data<br></code></pre></td></tr></table></figure><p>下面建立svn资源库，以<code>myproject</code>为例</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">mkdir</span> ~/svn<br><span class="hljs-built_in">cd</span> ~/svn<br><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">mkdir</span> myproject<br><span class="hljs-built_in">sudo</span> svnadmin create ~/myproject<br></code></pre></td></tr></table></figure><p>更改目录权限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> ~/svn<br><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">chown</span> -R www-data:subversion myproject<br><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">chmod</span> -R g+rws myproject<br></code></pre></td></tr></table></figure><p>下面就可以测试下安装是否OK了~</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">svn co file://localhost/home/diors/svn/myproject<br></code></pre></td></tr></table></figure><h3 id="通过http访问svn"><a href="#通过http访问svn" class="headerlink" title="通过http访问svn"></a>通过http访问svn</h3><p>因为目前服务器采用的是nginx，但是由于nginx现在暂时不支持subversion，所以只能安装apache集成subversion，然后通过nginx proxy给apache来访问代码仓库。</p><p>安装apache2及subversion模块</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> apt-get install apache2 libapache2-svn<br></code></pre></td></tr></table></figure><p>修改端口并启动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> vim /etc/apache2/ports.conf<br><span class="hljs-built_in">sudo</span> /etc/init.d/apache2 restart<br></code></pre></td></tr></table></figure><p>在<code>/etc/apache2/mods-available/dav_svn.conf</code>中添加如下配置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs conf"># Subversion版本可用的URL是http://域名或IP/svn<br>&lt;Location /svn/myproject&gt;<br>    # 告诉Apache是哪个模块响应哪个URL的请求，在这里是Subversion模块<br>    DAV svn<br><br>    #告诉Subversion需要查看的版本库在/home/svn之下。<br>    #如果不希望为每个单独的项目都进行单独的设置，可以把所有项目都存放在统一的资源库目录<br>    #使用SVNParentPath指令来指定存放所有项目的路径。否则使用SVNPath<br>    SVNParentPath ~/svn/<br><br>    #认证类型为基本认证，就是用户名和密码<br>    AuthType Basic<br><br>    #认证名称，将在浏览器界面弹出一个对话框，标题为Subversion repository<br>    AuthName &quot;Subversion repository&quot;<br>    AuthUserFile /etc/subversion/passwd<br>    <br>    #禁止匿名访问<br>    Require valid-user<br><br>&lt;/Location&gt;<br></code></pre></td></tr></table></figure><p>创建认证用户：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># first user</span><br><span class="hljs-built_in">sudo</span> htpasswd -c /etc/subversion/passwd user_name<br><span class="hljs-comment"># second user</span><br><span class="hljs-built_in">sudo</span> htpasswd /etc/subversion/passwd second_user_name<br></code></pre></td></tr></table></figure><p>之后重启apache2就可以了，接下来就是配置nginx转发啦~</p><h3 id="安装WebSVN"><a href="#安装WebSVN" class="headerlink" title="安装WebSVN"></a>安装WebSVN</h3><p>首先下载最新版本的<code>WebSVN</code>(官网：<a href="http://www.websvn.info/download/">http://www.websvn.info/download/</a>)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">wget http://websvn.tigris.org/files/documents/1380/49056/websvn-2.3.3.tar.gz<br></code></pre></td></tr></table></figure><p>解压后放到nginx的<code>wwwroot</code>目录下，并配置nginx （这里就略去了~..）</p><p>之后，需修改配置文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cp</span> ~/websvn/include/distconfig.php ~/websvn/include/config.php<br><br>vim ~/websvn/include/config.php<br><br><span class="hljs-variable">$config</span>-&gt;addRepositorySubpath(<span class="hljs-string">&#x27;myproject&#x27;</span>, <span class="hljs-string">&#x27;file:///home/../myproject&#x27;</span>, <span class="hljs-string">&#x27;myproject&#x27;</span>);<br></code></pre></td></tr></table></figure><p>在nginx中增加访问控制：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs conf">auth_basic &quot;Restricted&quot;;<br>auth_basic_user_file /etc/subversion/passwd;<br></code></pre></td></tr></table></figure><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>嗯，到这里，整个安装配置过程就算结束了<del>还算比较辛苦吧</del>O(∩_∩)O~</p>]]></content>
    
    
    
    <tags>
      
      <tag>vps</tag>
      
      <tag>ubuntu</tag>
      
      <tag>svn</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>django下celery的使用</title>
    <link href="/02/23/2014/django_celery/"/>
    <url>/02/23/2014/django_celery/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>今天在使用django做后台的时候，遇到了这样的问题：django在处理用户请求的时候，需要进行一个耗时较长的异步抓取操作，同时希望能立即给用户返回数据，使用常规的daemon进程的方式没有解决该问题，用力Google了一下发现如下<a href="http://stackoverflow.com/questions/9495892/trigger-function-after-returning-httpresponse-from-django-view">解答</a>：</p><blockquote><p>In fact Django have a syncronous model. If you want to do real async processing, you need a message queue. The most used with django is celery, it may look a bit “overkill” but it’s a good answer.</p><p>Why do we need this? because in a wsgi app, apache give the request to the executable, and, the executable returns text. It’s only once when the executable finish his execution that apache aknowledge the end of the request.</p></blockquote><h2 id="celery安装"><a href="#celery安装" class="headerlink" title="celery安装"></a>celery安装</h2><p>官网：<a href="http://www.celeryproject.org/">http://www.celeryproject.org/</a>，celery利用python编写，实现了分布式的消息队列。安装如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> pip install celery<br></code></pre></td></tr></table></figure><p>此外，celery需要方案来实现发送和接收消息，通常通过一种<code>message broker</code>的独立服务来完成，我们安装官方推荐的<a href="http://www.rabbitmq.com/">RabbitMQ</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> apt-get install rabbitmq-server<br></code></pre></td></tr></table></figure><h2 id="celery介绍"><a href="#celery介绍" class="headerlink" title="celery介绍"></a>celery介绍</h2><p>首先，我们需要创建一个celery的实例，编写文件<code>tasks.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> celery <span class="hljs-keyword">import</span> Celery<br>    <br>app = Celery(<span class="hljs-string">&#x27;tasks&#x27;</span>, broker=<span class="hljs-string">&#x27;amqp://guest@localhost//&#x27;</span>)<br><br><span class="hljs-meta">@app.task</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">x, y</span>):<br>    <span class="hljs-keyword">return</span> x + y<br></code></pre></td></tr></table></figure><p>第一个参数<code>tasks</code>是当前模块的名称，第二个参数指定了所使用的<code>message broker</code>的URL，上使用的是<code>RabbitMQ</code>默认URL</p><h3 id="启动celery-work进程"><a href="#启动celery-work进程" class="headerlink" title="启动celery work进程"></a>启动celery work进程</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">celery -A tasks worker --loglevel=info<br><span class="hljs-comment">#帮助</span><br>celery worker --<span class="hljs-built_in">help</span><br>celery <span class="hljs-built_in">help</span><br></code></pre></td></tr></table></figure><h3 id="调用task"><a href="#调用task" class="headerlink" title="调用task"></a>调用task</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> tasks <span class="hljs-keyword">import</span> add<br>add.delay(<span class="hljs-number">4</span>, <span class="hljs-number">4</span>)<br><br></code></pre></td></tr></table></figure><h2 id="celery在django的使用"><a href="#celery在django的使用" class="headerlink" title="celery在django的使用"></a>celery在django的使用</h2><p>整体框架如下：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs text">*--------*                     +----------+<br>|        |                     |          |<br>| Django &gt;--- Enqueue tasks ---&gt; RabbitMQ &gt;-----.<br>|        |                     | (Broker) |     |<br>*---v----*                     +----------+     |<br>    |                                           |<br>    | Query                    *----------*     |<br>    |                          |  Celery  &lt;-----+<br>  +-v----------+  .-- Events --&lt;  Worker  |     |<br>  |            | /             *----------*     | Consume<br>  | PostgreSQL &lt;=                               | &amp; Run Tasks<br>  |            | \             *----------*     |<br>  +------------+  `-- Events --&lt;  Celery  |     |<br>                               |  Worker  &lt;-----&#x27;<br>                               *----------*<br></code></pre></td></tr></table></figure><p>官方教程已经足够详细了<del>在此就不在累述了</del> ;-)，请戳：<a href="http://docs.celeryproject.org/en/latest/django/first-steps-with-django.html">http://docs.celeryproject.org/en/latest/django/first-steps-with-django.html</a></p><h2 id="附：supervise介绍"><a href="#附：supervise介绍" class="headerlink" title="附：supervise介绍"></a>附：supervise介绍</h2><p>嗯，插入supervise的介绍<del>方便之后在后台运行celery实例。因为我厂大规模使用supervise管理服务程序，所以，有必要好好了解一下了</del></p><p>supervise是开源工具集<a href="http://cr.yp.to/daemontools.html">daemontools</a>其中的一个工具</p><h3 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h3><p>supervise启动的时候fork一个子进程,子进程执行execvp系统调用,将自己替换成执行的模块,<br>模块变成supervise的子进程在运行,而supervise则死循环运行,并通过waitpid或者wait3系统调用选择非阻塞的方式去侦听子进程的运行情况,</p><p>当然同时也会读取pipe文件svcontrol的命令,然后根据命令去执行不同的动作,<br>如果子进程因某种原因导致退出,则supervise通过waitpid或者wait3获知,并继续启动模块,如果模块异常导致无法启动,则会使supervise陷入死循环,不断的启动模块。</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> apt-get install daemontools<br></code></pre></td></tr></table></figure><h3 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#supervise 目录名</span><br>supervise s<br></code></pre></td></tr></table></figure><p>supervise switches to the directory named <code>s</code> and starts <code>./run</code>. It restarts <code>./run</code> if <code>./run</code> exits. It pauses for a second after starting <code>./run</code>, so that it does not loop too quickly if <code>./run</code> exits immediately.</p><p>If the file <code>s/down</code> exists, supervise does not start <code>./run</code> immediately. You can use <code>svc</code> to start <code>./run</code> and to give other commands to supervise.</p><p>supervise maintains status information in a binary format inside the directory <code>s/supervise</code>, which must be writable to supervise. The status information can be read by svstat.</p><p>supervise may exit immediately after startup if it cannot find the files it needs in <code>s</code> or if another copy of supervise is already running in <code>s</code>. Once supervise is successfully running, it will not exit unless it is killed or specifically asked to exit. You can use <code>svok</code> to check whether supervise is successfully running. You can use <code>svscan</code> to reliably start a collection of supervise processes.</p><p>supervise 切换到名为 <code>s</code> 的目录并启动 <code>./run</code>。如果 <code>./run</code> 退出，它会重新启动 <code>./run</code>。在启动 <code>./run</code> 后，它会暂停一秒，以防 <code>./run</code> 立即退出导致循环过快。</p><p>如果文件 <code>s/down</code> 存在，supervise 不会立即启动 <code>./run</code>。你可以使用 <code>svc</code> 来启动 <code>./run</code> 并向 supervise 发送其他命令。</p><p>supervise 以二进制格式在目录 <code>s/supervise</code> 中维护状态信息，该目录必须对 supervise 可写。svstat 可以读取这些状态信息。</p><p>如果在 <code>s</code> 中找不到所需文件，或者已经有另一份 supervise 在 <code>s</code> 中运行，supervise 可能会在启动后立即退出。一旦 supervise 成功运行，除非被终止或明确要求退出，否则它不会退出。你可以使用 <code>svok</code> 检查 supervise 是否成功运行。你可以使用 <code>svscan</code> 可靠地启动一组 supervise 进程。</p>]]></content>
    
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>django</tag>
      
      <tag>celery</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>利用bitbucket进行teamwork</title>
    <link href="/02/22/2014/bitbucket_teamwork/"/>
    <url>/02/22/2014/bitbucket_teamwork/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>嗯，先简单介绍下<a href="https://bitbucket.org/">bitbucket</a>吧~下面引自wikipedia:</p><blockquote><p>Bitbucket是一家为使用Mercurial和Git版本控制系统的项目提供网络托管服务的网站。Bitbucket既提供免费帐号，也提供商业付费方案。免费帐号可以使用无限数量的私有版本库（免费帐号至多支持5名用户）截至2010年9月，而如果用户能邀请3位朋友注册Bitbucket，则至多可以为8名用户提供服务。[1]私有版本库不会在个人页面上展示；如果用户只拥有私有版本库，网站则会显示还没有创建任何版本库，直到这名用户创建了公开版本库为止。Bitbucket使用Python下的DjangoWeb应用框架编写。</p></blockquote><h2 id="具体步骤"><a href="#具体步骤" class="headerlink" title="具体步骤"></a>具体步骤</h2><p>利用bitbucket完成teamwork和持续集成的流程如下：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs text">+----------+<br>| Develop  |<br>+----+-----+<br>     |<br>     | push with sourcetree<br>     |<br>+----v-----+<br>| Bitbucket|<br>+----+-----+<br>     |<br>     | fetch and release on Server<br>     |<br>+----v-----+<br>| Server   |<br>+----------+<br></code></pre></td></tr></table></figure><p>即开发在本机完成，利用sourcetree将代码push至bitbucket服务器，最后在服务器端同步代码并发布。</p><h3 id="服务端配置"><a href="#服务端配置" class="headerlink" title="服务端配置"></a>服务端配置</h3><p>生成public key并添加至bitbucket</p><p>首先登陆<a href="https://bitbucket.org/">https://bitbucket.org</a>,依次选择<code>Username &gt; Account &gt; SSH keys</code>。然后登陆服务器，生成public key：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> ~ &amp;&amp; <span class="hljs-built_in">mkdir</span> .ssh<br>ssh-keygen -t rsa -C <span class="hljs-string">&quot;..&quot;</span><br><span class="hljs-built_in">cat</span> ~/.ssh/id_rsa.pub<br></code></pre></td></tr></table></figure><p>添加完public key之后，执行如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh -Tv git@bitbucket.org<br></code></pre></td></tr></table></figure><p>之后即可正常使用git，无需账号密码，例如第一次使用时，如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">git add README.md<br>git commit -m <span class="hljs-string">&#x27;First commit&#x27;</span><br>git remote add origin git@bitbucket.org:YOUR.git<br>git push origin master<br></code></pre></td></tr></table></figure><h3 id="开发机配置"><a href="#开发机配置" class="headerlink" title="开发机配置"></a>开发机配置</h3><p>代码在自己机器上开发，利用sourcetree上传至bitbucket，下载：<a href="http://www.sourcetreeapp.com/">http://www.sourcetreeapp.com/</a>，教程在<a href="http://blackish.at/blog/wp-content/uploads/2013/04/UnityBitBucketSourceTree_ForAll.pdf">这里</a></p><p>嗯，最后上一张sourcetree的图：<br><img src="https://lh3.googleusercontent.com/-4C4DnWmMhGI/UwjTuyOH3AI/AAAAAAAADQ4/QtlEoZ6Y8Ss/s912/QQ%2520Photo20140223004312.jpg" alt="0"></p>]]></content>
    
    
    
    <tags>
      
      <tag>bitbucket</tag>
      
      <tag>git</tag>
      
      <tag>teamwork</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>记一次捉急的文本处理</title>
    <link href="/02/19/2014/python_ana_url/"/>
    <url>/02/19/2014/python_ana_url/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>今天要需要统计10w个query的页面构成，由于输入文件格式不标准，url编码不统一等各种问题，整个统计过程相当纠结…下面将其中的一些点记录下来，供以后参考</p><h2 id="异常文件处理"><a href="#异常文件处理" class="headerlink" title="异常文件处理"></a>异常文件处理</h2><p>删除文件最后的异常行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">for</span> file <span class="hljs-keyword">in</span> `<span class="hljs-built_in">ls</span>`; <span class="hljs-keyword">do</span> line=`<span class="hljs-built_in">tail</span> -1 <span class="hljs-variable">$file</span>`; <span class="hljs-keyword">if</span> [ <span class="hljs-string">&quot;<span class="hljs-variable">$line</span>&quot;</span> != <span class="hljs-string">&quot;&#125;,&quot;</span> ]; <span class="hljs-keyword">then</span> sed -i <span class="hljs-string">&#x27;$d&#x27;</span> <span class="hljs-variable">$file</span>;<span class="hljs-keyword">fi</span>;<span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure><p>删除目录下的空文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">find -maxdepth 1 -<span class="hljs-built_in">type</span> f -empty -print0 | xargs -0 <span class="hljs-built_in">rm</span> -f<br></code></pre></td></tr></table></figure><h2 id="python处理url"><a href="#python处理url" class="headerlink" title="python处理url"></a>python处理url</h2><p>从url中获取domain name:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-keyword">from</span> urlparse  <span class="hljs-keyword">import</span> urlparse, parse_qs<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_domain_from_url</span>(<span class="hljs-params">url</span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#123;uri.scheme&#125;://&#123;uri.netloc&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(uri=urlparse(url))<br></code></pre></td></tr></table></figure><p>从url中获取参数，如本例中的wd字段，其中对编码的处理还不够完善，需继续改进~</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-keyword">from</span> urlparse  <span class="hljs-keyword">import</span> urlparse, parse_qs<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_query_from_url</span>(<span class="hljs-params">url</span>):<br>    <span class="hljs-keyword">try</span>:<br>        query_url = urllib.unquote(url).decode(<span class="hljs-string">&#x27;utf8&#x27;</span>)<br>    <span class="hljs-keyword">except</span> UnicodeDecodeError:<br>         <span class="hljs-keyword">try</span>:<br>             query_url = urllib.unquote(url).decode(<span class="hljs-string">&#x27;gbk&#x27;</span>)<br>         <span class="hljs-keyword">except</span> UnicodeDecodeError:<br>             <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Unkown Encoding&quot;</span><br>    <span class="hljs-keyword">try</span>:<br>         wd = parse_qs(urlparse(query_url).query)[<span class="hljs-string">&#x27;wd&#x27;</span>][<span class="hljs-number">0</span>].encode(<span class="hljs-string">&#x27;utf8&#x27;</span>)<br>     <span class="hljs-keyword">except</span> KeyError:<br>         wd = <span class="hljs-string">&quot;Unkown Key&quot;</span><br>    <span class="hljs-keyword">return</span> wd<br></code></pre></td></tr></table></figure><h2 id="其他技巧"><a href="#其他技巧" class="headerlink" title="其他技巧"></a>其他技巧</h2><p>python计算平均数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">average</span>(<span class="hljs-params">values</span>):<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">float</span>(<span class="hljs-string">&#x27;%.2f&#x27;</span> % (<span class="hljs-built_in">sum</span>(values, <span class="hljs-number">0.0</span>) / <span class="hljs-built_in">len</span>(values)))<br></code></pre></td></tr></table></figure><p>python找出list中重复的值：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">find_dup_value_from_list</span>(<span class="hljs-params">inlist</span>):<br>    <span class="hljs-keyword">return</span> [x <span class="hljs-keyword">for</span> x, y <span class="hljs-keyword">in</span> collections.Counter(inlist).items() <span class="hljs-keyword">if</span> y &gt; <span class="hljs-number">1</span>]<br></code></pre></td></tr></table></figure><p>python匹配出日志中key&#x3D;value类型的值：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">find_value_from_string</span>(<span class="hljs-params">string, key</span>):<br>    regex = <span class="hljs-string">&#x27;\s*&#x27;</span> + key + <span class="hljs-string">&#x27;=(\w+)\s*&#x27;</span> <br>    <span class="hljs-keyword">return</span> re.findall(regex, string)<br></code></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>python的数据结构还需要系统的看下，不然好多基础问题还得Goolge..太影响效率了。囧ｏ（╯□╰）ｏ．．</p><p>嗯，准备系统的看下官方文档：<a href="http://docs.python.org/2/tutorial/index.html">http://docs.python.org/2/tutorial/index.html</a>.嗯，之前<a href="http://blog.felixc.at/">喵大</a>说要看的..．喵的，还没看完！最近抽时间看完！</p>]]></content>
    
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>pyhon</tag>
      
      <tag>sed</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>tcpdump用法简介</title>
    <link href="/02/18/2014/tcpdump/"/>
    <url>/02/18/2014/tcpdump/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>今天在追查问题时，需要转包分析，用到了tcpdump工具，下面做下记录~</p><h3 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h3><p>tcpdump 采用命令行方式，需以root权限运行，它的命令格式为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">tcpdump [ -adeflnNOpqStvx ] [ -c 数量 ] [ -F 文件名 ]<br>        [ -i 网络接口 ] [ -r 文件名] [ -s snaplen ]<br>        [ -T 类型 ] [ -w 文件名 ] [表达式 ]<br></code></pre></td></tr></table></figure><p>简单用法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">tcpdump -i eth1 port 8001<br><br><span class="hljs-comment">#查看localhost数据包</span><br>tcpdump -i lo port 8001<br></code></pre></td></tr></table></figure><p>将结果写入文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">tcpdump -i lo -nn port 8001 -w dump<br></code></pre></td></tr></table></figure><p>显示http header：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">tcpdump -vvvs 1024 -l -A -i lo port 8001 -w dump<br></code></pre></td></tr></table></figure><p>查看tcpdump生成的文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">tcpdump -qns 0 -X -r dump<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>tcpdump</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Memcached和Redis基础</title>
    <link href="/02/17/2014/memcached_and_redis_basic/"/>
    <url>/02/17/2014/memcached_and_redis_basic/</url>
    
    <content type="html"><![CDATA[<p>本文主要介绍Memcached和Redisd的使用基础</p><h3 id="Memcached安装和使用"><a href="#Memcached安装和使用" class="headerlink" title="Memcached安装和使用"></a>Memcached安装和使用</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> apt-get install memcached<br><span class="hljs-built_in">sudo</span> apt-get install php-pecl-memcache<br>memcached -d -p 11211 -u memcached -m 64 -c 1024 -P /var/run/memcached/memcached.pid<br></code></pre></td></tr></table></figure><p>参数说明：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs text">- d 启动一个守护进程<br>- p 端口<br>- m 分配的内存是M<br>- c 最大运行并发数<br>- P memcache的pid<br></code></pre></td></tr></table></figure><p>php使用代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$memcache</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Memcache</span>;<br><span class="hljs-variable">$memcache</span> -&gt; <span class="hljs-title function_ invoke__">connect</span>(<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>, <span class="hljs-number">11211</span>);<br><span class="hljs-variable">$memcache</span> -&gt; <span class="hljs-title function_ invoke__">set</span>(<span class="hljs-string">&#x27;name&#x27;</span>,<span class="hljs-string">&#x27;yang&#x27;</span>,<span class="hljs-number">0</span>,<span class="hljs-number">30</span>);<br><span class="hljs-keyword">if</span>(!<span class="hljs-variable">$memcache</span>-&gt;<span class="hljs-title function_ invoke__">add</span>(<span class="hljs-string">&#x27;name&#x27;</span>,<span class="hljs-string">&#x27;susan&#x27;</span>,<span class="hljs-number">0</span>, <span class="hljs-number">30</span>)) &#123;<br><span class="hljs-comment">//echo &#x27;susan is exist&#x27;;</span><br>&#125;<br><span class="hljs-variable">$memcache</span> -&gt; <span class="hljs-title function_ invoke__">replace</span>(<span class="hljs-string">&#x27;name&#x27;</span>, <span class="hljs-string">&#x27;lion&#x27;</span>, <span class="hljs-number">0</span>, <span class="hljs-number">300</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$memcache</span> -&gt; <span class="hljs-title function_ invoke__">get</span>(<span class="hljs-string">&#x27;name&#x27;</span>);<br><span class="hljs-comment">//$memcache -&gt; delete(&#x27;name&#x27;, 5);</span><br></code></pre></td></tr></table></figure><p>登陆命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;stats\r\n&quot;</span> | nc 127.0.0.1 11211<br>telnet localhost 11211 stats quit退出<br></code></pre></td></tr></table></figure><h3 id="Redis使用"><a href="#Redis使用" class="headerlink" title="Redis使用"></a>Redis使用</h3><p>Redis的配置文件 端口6379<br><code>/etc/redis.conf</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">启动Redis<br>redis-server /etc/redis.conf<br>插入一个值<br>redis-cli <span class="hljs-built_in">set</span> <span class="hljs-built_in">test</span> <span class="hljs-string">&quot;phper.yang&quot;</span><br>获取键值<br>redis-cli get <span class="hljs-built_in">test</span><br>关闭Redis<br>redis-cli shutdown 关闭所有<br>redis-cli -p 6397 shutdown<br></code></pre></td></tr></table></figure><p>php使用代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$redis</span>=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Redis</span>();<br><span class="hljs-variable">$redis</span>-&gt;<span class="hljs-title function_ invoke__">connect</span>(<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>,<span class="hljs-number">6379</span>);<br><span class="hljs-variable">$redis</span>-&gt;<span class="hljs-title function_ invoke__">set</span>(<span class="hljs-string">&#x27;test&#x27;</span>, <span class="hljs-string">&#x27;Hello World&#x27;</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$redis</span>-&gt;<span class="hljs-title function_ invoke__">get</span>(<span class="hljs-string">&#x27;test&#x27;</span>);<br></code></pre></td></tr></table></figure><p>下面是一个redis的类<br>Redis Class使用:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$conf</span> = <span class="hljs-keyword">array</span>(<br>    <span class="hljs-string">&#x27;sc&#x27;</span> =&gt; <span class="hljs-literal">true</span>, <span class="hljs-comment">//是否开启主从，需要Redis 配置文件配置好</span><br>    <span class="hljs-string">&#x27;servers&#x27;</span> =&gt; <span class="hljs-keyword">array</span>(<br>        <span class="hljs-string">&#x27;master&#x27;</span> =&gt; <span class="hljs-keyword">array</span>( <span class="hljs-comment">//主写</span><br>            <span class="hljs-string">&#x27;host&#x27;</span> =&gt; <span class="hljs-string">&#x27;127.0.0.1&#x27;</span>,<br>            <span class="hljs-string">&#x27;port&#x27;</span> =&gt; <span class="hljs-number">63888</span>,<br>            <span class="hljs-string">&#x27;timeout&#x27;</span> =&gt; <span class="hljs-number">10</span>,<br>            <span class="hljs-string">&#x27;auth&#x27;</span> =&gt; <span class="hljs-number">123456</span>,<br>        ),<br>        <span class="hljs-string">&#x27;slave&#x27;</span> =&gt; <span class="hljs-keyword">array</span>(<br>            <span class="hljs-keyword">array</span>( <span class="hljs-comment">//从读</span><br>                <span class="hljs-string">&#x27;host&#x27;</span> =&gt; <span class="hljs-string">&#x27;127.0.0.1&#x27;</span>,<br>                <span class="hljs-string">&#x27;port&#x27;</span> =&gt; <span class="hljs-number">63791</span>,<br>                <span class="hljs-string">&#x27;timeout&#x27;</span> =&gt; <span class="hljs-number">10</span>,<br>                <span class="hljs-string">&#x27;auth&#x27;</span> =&gt; <span class="hljs-number">123456</span>,<br>            ),<br>            <span class="hljs-keyword">array</span>( <span class="hljs-comment">//从读</span><br>                <span class="hljs-string">&#x27;host&#x27;</span> =&gt; <span class="hljs-string">&#x27;127.0.0.1&#x27;</span>,<br>                <span class="hljs-string">&#x27;port&#x27;</span> =&gt; <span class="hljs-number">63792</span>,<br>                <span class="hljs-string">&#x27;timeout&#x27;</span> =&gt; <span class="hljs-number">10</span>,<br>                <span class="hljs-string">&#x27;auth&#x27;</span> =&gt; <span class="hljs-number">123456</span>,<br>            )<br>        ),<br>    )<br>);<br></code></pre></td></tr></table></figure><p>关于配置Redis的主从配置说明:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs conf">m.conf  port 6378<br>~/bin/redis-cli -h 127.0.0.1 -p 6378<br>s.conf：port: 6379 slaveof 127.0.0.1 6379<br>~/bin/redis-cli -h 127.0.0.1 -p 6379<br>RDB(bgsave 命令)<br></code></pre></td></tr></table></figure><p>配置文件<code>redis.conf</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash">save 900 1  <span class="hljs-comment">#900秒内如果超过1个key被修改，则发起快照保存</span><br>save 300 10 <span class="hljs-comment">#300秒内容如超过10个key被修改，则发起快照保存</span><br>save 60 10000<br>save /bgsave<br>~/.jumbo/bin/dump.rdb<br>AOF(bgrewriteaof命令)<br>appendonly <span class="hljs-built_in">yes</span>  //启用aof持久化方式<br><span class="hljs-comment"># appendfsync always  //每次收到写命令就立即强制写入磁盘，最慢的，但是保证完全的持久化，不推荐使用</span><br><br>appendfsync everysec //每秒钟强制写入磁盘一次，在性能和持久化方面做了很好的折中，推荐<br><span class="hljs-comment"># appendfsync no    //完全依赖os，性能最好,持久化没保证</span><br><br></code></pre></td></tr></table></figure><p>php使用：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$r</span> = <span class="hljs-variable">$redis</span>-&gt;<span class="hljs-title function_ invoke__">getRedis</span>()-&gt;<span class="hljs-title function_ invoke__">info</span>(); <span class="hljs-comment">//写数据</span><br><span class="hljs-title function_ invoke__">print_r</span>(<span class="hljs-string">&quot;主&quot;</span> . <span class="hljs-variable">$r</span>[<span class="hljs-string">&#x27;tcp_port&#x27;</span>]);<br><span class="hljs-variable">$redis</span>-&gt;<span class="hljs-title function_ invoke__">set</span>(<span class="hljs-string">&#x27;id&#x27;</span>, <span class="hljs-number">100</span>);<br><span class="hljs-variable">$r</span> = <span class="hljs-variable">$redis</span>-&gt;<span class="hljs-title function_ invoke__">getRedis</span>(<span class="hljs-literal">false</span>)-&gt;<span class="hljs-title function_ invoke__">info</span>(); <span class="hljs-comment">//读数据</span><br><span class="hljs-title function_ invoke__">print_r</span>(<span class="hljs-string">&quot;从&quot;</span> . <span class="hljs-variable">$r</span>[<span class="hljs-string">&#x27;tcp_port&#x27;</span>]);<br><span class="hljs-title function_ invoke__">print_r</span>(<span class="hljs-variable">$redis</span>-&gt;<span class="hljs-title function_ invoke__">getRedis</span>(<span class="hljs-literal">false</span>)-&gt;<span class="hljs-title function_ invoke__">get</span>(<span class="hljs-string">&#x27;id&#x27;</span>));<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>memcached</tag>
      
      <tag>reids</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>利用tc工具做限速</title>
    <link href="/02/17/2014/tc_usage/"/>
    <url>/02/17/2014/tc_usage/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>有关tc的介绍，可以参见<a href="http://www.cyberciti.biz/faq/linux-traffic-shaping-using-tc-to-control-http-traffic/">tc</a></p><h2 id="tc的使用"><a href="#tc的使用" class="headerlink" title="tc的使用"></a>tc的使用</h2><h3 id="tc封装的脚本"><a href="#tc封装的脚本" class="headerlink" title="tc封装的脚本"></a>tc封装的脚本</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><span class="hljs-comment">#a simple example for &quot;tc&quot;</span><br><span class="hljs-comment">#set the param</span><br>PORT=<span class="hljs-variable">$2</span><br>DELAY=<span class="hljs-variable">$3</span><br>SPEED=<span class="hljs-variable">$4</span><br>FLOW=<span class="hljs-variable">$5</span><br>NETWORK_CARD=eth1    <br><br><span class="hljs-built_in">set</span> -x<br><span class="hljs-function"><span class="hljs-title">start</span></span> () &#123;<br>    /sbin/tc qdisc add dev <span class="hljs-variable">$&#123;NETWORK_CARD&#125;</span> root handle 1: htb default 25<br>    /sbin/tc class add dev <span class="hljs-variable">$&#123;NETWORK_CARD&#125;</span> parent 1: classid 1:1 htb rate <span class="hljs-variable">$&#123;SPEED&#125;</span>kbps<br>    /sbin/tc qdisc add dev <span class="hljs-variable">$&#123;NETWORK_CARD&#125;</span> parent 1:1 netem delay <span class="hljs-variable">$&#123;DELAY&#125;</span>ms <span class="hljs-variable">$&#123;FLOW&#125;</span>ms<br>    /sbin/tc filter add dev <span class="hljs-variable">$&#123;NETWORK_CARD&#125;</span> parent 1: protocol ip prio 1 u32 match ip sport <span class="hljs-variable">$&#123;PORT&#125;</span> 0xffff flowid 1:1<br>&#125;<br><br><span class="hljs-function"><span class="hljs-title">stop</span></span> () &#123;<br>    /sbin/tc qdisc dele dev <span class="hljs-variable">$&#123;NETWORK_CARD&#125;</span> root<br>&#125;<br><br><span class="hljs-keyword">case</span> <span class="hljs-string">&quot;<span class="hljs-variable">$1</span>&quot;</span> <span class="hljs-keyword">in</span>    <br>    start)<br>        start<br>        ;;<br>    stop)<br>        stop<br>        ;;<br>    *)<br>        <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Usage: `basename <span class="hljs-variable">$0</span>` &#123;start|stop&#125; port delay(ms) speed(KB) flow(ms)&quot;</span><br><span class="hljs-keyword">esac</span><br></code></pre></td></tr></table></figure><h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">3g 限制http： sh /root/net_limit.sh start 8900 200 355 0<br>3g 限制Spdy： sh /root/net_limit.sh start 8901 200 355 0<br> <br>慢wifi限制http:  sh /root/net_limit.sh start 8900 80 2048 0<br>慢wifi限制spdy:  sh /root/net_limit.sh start 8901 80 2048 0<br> <br>快wifi限制http: sh /root/net_limit.sh start 8900 40 14748 0<br>快wifi限制spdy: sh /root/net_limit.sh start 8901 40 14748 0<br></code></pre></td></tr></table></figure><p>查看当前限制</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">tc -s qdisc <span class="hljs-built_in">ls</span> dev eth1<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>tc</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Ubuntu10.04 VPS配置（一）基础环境篇</title>
    <link href="/02/17/2014/vps_1/"/>
    <url>/02/17/2014/vps_1/</url>
    
    <content type="html"><![CDATA[<h2 id="VPS介绍"><a href="#VPS介绍" class="headerlink" title="VPS介绍"></a>VPS介绍</h2><ul><li>购买网址：<a href="http://www.xehost.com/">http://www.xehost.com</a></li><li>系统：<code>ubuntu 10.04 lsb_release -a</code></li><li>Control Panel：<a href="https://cp.vps6.com/">https://cp.vps6.com</a></li></ul><h4 id="增加非root用户"><a href="#增加非root用户" class="headerlink" title="增加非root用户"></a>增加非root用户</h4><p>当以root权限登陆一台全新的VPS之后，第一件事情就是增加拥有sudo权限的非root用户，目的如下:</p><ul><li>it prevents the user making any system-destroying mistakes</li><li>it stores all the commands run with sudo to a file where can be reviewed later if needed</li></ul><p>增加用户</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> adduser work<br></code></pre></td></tr></table></figure><p>增加sudo权限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> /usr/sbin/visudo<br>    <br><span class="hljs-comment"># User privilege specification</span><br>rootALL=(ALL:ALL) ALL<br>workALL=(ALL:ALL) ALL<br></code></pre></td></tr></table></figure><p>删除用户</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> userdel newuser<br><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">rm</span> -rf /home/newuser<br></code></pre></td></tr></table></figure><h3 id="安装tmux-1-8"><a href="#安装tmux-1-8" class="headerlink" title="安装tmux 1.8"></a>安装tmux 1.8</h3><p>ubuntu Lucid源中的tmux版本过老，为此，我们手动安装tmux 1.8，</p><p>安装基础编译环境</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> apt-get install build-essential<br></code></pre></td></tr></table></figure><p>安装依赖包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">wget https://github.com/downloads/libevent/libevent/libevent-2.0.21-stable.tar.gz<br>tar xzf libevent-2.0.21-stable.tar.gz<br><span class="hljs-built_in">cd</span> libevent-2.0.21-stable<br>configure &amp;&amp; make &amp;&amp; <span class="hljs-built_in">sudo</span> make install<br><span class="hljs-built_in">sudo</span> apt-get install ncurses-dev<br></code></pre></td></tr></table></figure><p>安装tmux 1.8</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">wget http://downloads.sourceforge.net/tmux/tmux-1.8.tar.gz<br>tar xzf tmux-1.8.tar.gz<br><span class="hljs-built_in">cd</span> tmux-1.8<br>./configure LDFLAGS=<span class="hljs-string">&quot;-Wl,-rpath /usr/local/lib&quot;</span><br>make<br><span class="hljs-built_in">sudo</span> make install<br></code></pre></td></tr></table></figure><p>非root运行tmux技巧</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">bash -c <span class="hljs-string">&quot;export LD_LIBRARY_PATH=~/tool/bin/lib:<span class="hljs-variable">$LD_LIBRARY_PATH</span> &amp;&amp; ~/tool/bin/bin/tmux a || ~/tool/bin/bin/tmux -f ~/tool/conf/tmux.conf&quot;</span><br></code></pre></td></tr></table></figure><h4 id="tmux-配置文件"><a href="#tmux-配置文件" class="headerlink" title="tmux 配置文件"></a>tmux 配置文件</h4><hr><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><code class="hljs conf">set -g prefix ^a<br>unbind ^b<br>bind a send-prefix<br>unbind &#x27;&quot;&#x27;<br>bind - splitw -v # horizontal split<br>unbind %<br>bind | splitw -h # vertical split<br>bind k selectp -U # select upper pane<br>bind j selectp -D # select lower pane<br>bind h selectp -L # select left pane<br>bind l selectp -R # select right pane<br>bind ^k resizep -U 10<br>bind ^j resizep -D 10<br>bind ^h resizep -L 10<br>bind ^l resizep -R 10<br>bind ^u swapp -U # swap with upper pane<br>bind ^d swapp -D # swap with lower pane<br>    <br># THEME<br>set -g status-bg black<br>set -g status-fg white<br>set -g window-status-current-bg white<br>set -g window-status-current-fg black<br>set -g window-status-current-attr bold<br>set -g status-interval 60<br>set -g status-left-length 30<br>set -g status-left &#x27;#[fg=green](#S) #(whoami)&#x27;<br>set -g status-right &quot;#[fg=green]#(date)#[default] #[fg=green]#(cut -d &#x27; &#x27; -f 1-3 /proc/loadavg)#[default]&quot;<br><br>setw -g mode-keys vi<br>setw -g mode-mouse off<br>set -g terminal-overrides &#x27;xterm*:smcup@:rmcup@&#x27;<br>set -g base-index 1<br>#set -s escape-time 0<br>setw -g aggressive-resize on<br><br>unbind r<br>bind r source-file ~/.tmux.conf<br><br>set -g history-limit 25000<br><br>#T-Mobile G2 workarounds<br>bind Q send-keys F1<br>bind W send-keys F2<br>bind E send-keys F3<br>bind R send-keys F4<br>bind T send-keys F5<br>bind Y send-keys F6<br>bind U send-keys F7<br>bind I send-keys F8<br>bind O send-keys F9<br>bind P send-keys F10<br>bind A send-keys F11<br>bind S send-keys F12<br><br>bind / send-keys |<br><br>unbind t<br>bind t send-keys Tab<br><br>unbind N<br>bind N clock-mode<br><br>unbind @<br>bind @ send-keys Escape<br><br>unbind H<br>bind H send-keys Home<br><br>unbind L<br>bind L send-keys End<br><br>unbind J<br>bind J send-keys PageDown<br><br>unbind K<br>bind K send-keys PageUp<br><br>#Alt-n window switching<br>unbind M-1<br>unbind M-2<br>unbind M-3<br>unbind M-4<br>unbind M-5<br>unbind M-6<br>unbind M-7<br>unbind M-8<br>unbind M-9<br>bind-key -n M-1 select-window -t :1<br>bind-key -n M-2 select-window -t :2<br>bind-key -n M-3 select-window -t :3<br>bind-key -n M-4 select-window -t :4<br>bind-key -n M-5 select-window -t :5<br>bind-key -n M-6 select-window -t :6<br>bind-key -n M-7 select-window -t :7<br>bind-key -n M-8 select-window -t :8<br>bind-key -n M-9 select-window -t :9<br><br>bind-key -n ^PageDown next-window<br>bind-key -n ^PageUp previous-window<br><br>#set -g default-terminal &quot;screen-256color&quot;<br>#For compatibility<br>set -g default-terminal &quot;xterm-color&quot;<br><br>##CLIPBOARD selection integration<br>##Requires prefix key before the command key<br>#Copy tmux paste buffer to CLIPBOARD<br>bind C-c run &quot;tmux show-buffer | xclip -i -selection clipboard&quot;<br>#Copy CLIPBOARD to tmux paste buffer and paste tmux paste buffer<br>bind C-v run &quot;tmux set-buffer \&quot;$(xclip -o -selection clipboard)\&quot;; tmux paste-buffer&quot;<br></code></pre></td></tr></table></figure><h3 id="locale设置"><a href="#locale设置" class="headerlink" title="locale设置"></a>locale设置</h3><p>查看locale</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 查看当前系统语言环境</span><br>locale<br><br><span class="hljs-comment"># 查看系统内安装的locale</span><br>locale -a<br></code></pre></td></tr></table></figure><p>安装<code>zh_CN.utf8</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /usr/share/locales<br><span class="hljs-built_in">sudo</span> ./install-language-pack zh_CN<br></code></pre></td></tr></table></figure><p>locale配置： <code>/etc/default/locale</code></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs text">LANG=en_US.UTF-8<br>LANGUAGE=<br>LC_CTYPE=&quot;en_US.UTF-8&quot;<br>LC_NUMERIC=zh_CN.UTF-8<br>LC_TIME=zh_CN.UTF-8<br>LC_COLLATE=&quot;en_US.UTF-8&quot;<br>LC_MONETARY=zh_CN.UTF-8<br>LC_MESSAGES=&quot;en_US.UTF-8&quot;<br>LC_PAPER=zh_CN.UTF-8<br>LC_NAME=zh_CN.UTF-8<br>LC_ADDRESS=zh_CN.UTF-8<br>LC_TELEPHONE=zh_CN.UTF-8<br>LC_MEASUREMENT=zh_CN.UTF-8<br>LC_IDENTIFICATION=zh_CN.UTF-8<br>LC_ALL=<br></code></pre></td></tr></table></figure><h3 id="mosh-安装与配置"><a href="#mosh-安装与配置" class="headerlink" title="mosh 安装与配置"></a>mosh 安装与配置</h3><p>由于VPS在美国，ssh连接速度很慢，考虑用mosh解决该问题</p><p>The mosh-client binary must exist on the user’s machine, and the mosh-server binary on the remote host.</p><p>参考：<a href="http://mosh.mit.edu/">http://mosh.mit.edu/</a></p><p>安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> add-apt-repository ppa:keithw/mosh<br><span class="hljs-built_in">sudo</span> apt-get update<br><span class="hljs-built_in">sudo</span> apt-get install mosh<br></code></pre></td></tr></table></figure><p>防火墙配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> iptables -I INPUT 1 -p udp --dport 60000:61000 -j ACCEPT<br></code></pre></td></tr></table></figure><p>mosh登陆</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">mosh work@162.221.4.10<br></code></pre></td></tr></table></figure><h3 id="ftp-server安装"><a href="#ftp-server安装" class="headerlink" title="ftp server安装"></a>ftp server安装</h3><p>安装ftp server</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> apt-get install vsftpd<br></code></pre></td></tr></table></figure><p>配置：<code>/etc/vsftpd.conf</code></p><p>生效如下配置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs conf">chroot_local_user=YES<br>chroot_list_enable=YES<br>chroot_list_file=/etc/vsftpd.chroot_list<br></code></pre></td></tr></table></figure><p>重启ftp</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> /etc/init.d/vsftpd restart<br></code></pre></td></tr></table></figure><h3 id="nginx-安装与配置"><a href="#nginx-安装与配置" class="headerlink" title="nginx 安装与配置"></a>nginx 安装与配置</h3><p>参考：<a href="http://wiki.nginx.org/Install">http://wiki.nginx.org/Install</a></p><p>安装add-apt-repository</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> apt-get install python-software-properties<br></code></pre></td></tr></table></figure><p>安装nginx</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> add-apt-repository ppa:nginx/stable<br><span class="hljs-built_in">sudo</span> apt-get update<br><span class="hljs-built_in">sudo</span> apt-get install nginx<br></code></pre></td></tr></table></figure><p>nginx 配置：<code>/etc/nginx</code><br>参考：<a href="http://blog.martinfjordvald.com/2010/07/nginx-primer">http://blog.martinfjordvald.com/2010/07/nginx-primer</a></p><h3 id="php-fpm-mysql-安装"><a href="#php-fpm-mysql-安装" class="headerlink" title="php-fpm&amp;mysql 安装"></a>php-fpm&amp;mysql 安装</h3><p>增加ppa</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> apt-add-repository ppa:ondrej/php5-oldstable<br></code></pre></td></tr></table></figure><p>安装php组件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> aptitude -y install php5-cli php5-common php5-mysql php5-suhosin php5-gd<br><span class="hljs-built_in">sudo</span> aptitude -y install php5-fpm php5-cgi php-pear php5-memcache php-apc<br></code></pre></td></tr></table></figure><h4 id="ubuntu-增加lib"><a href="#ubuntu-增加lib" class="headerlink" title="ubuntu 增加lib"></a>ubuntu 增加lib</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> vim /etc/ld.so.conf.d/newlib.conf<br><span class="hljs-comment"># Add the path to file and save it</span><br><br><span class="hljs-built_in">sudo</span> ldconfig<br></code></pre></td></tr></table></figure><h2 id="未完待续…"><a href="#未完待续…" class="headerlink" title="未完待续…"></a>未完待续…</h2><p>本人最近折腾了好几台VPS（国内外），国内用的阿里云用的是ubuntu 12.04，软件源较新，安装软件远没有以上ubuntu10.04折腾…喵，VPS配置第二篇将会涉及VPS安全相关的内容<del>后续也会陆续在Github上分享本人的vim, bashrc等配置</del></p>]]></content>
    
    
    
    <tags>
      
      <tag>vps ubuntu</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>利用github搭建个人博客</title>
    <link href="/02/16/2014/build_blog/"/>
    <url>/02/16/2014/build_blog/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>首先，感谢<a href="http://www.lizherui.com/">lizherui大牛</a>博客中的<a href="http://www.lizherui.com/pages/2013/08/17/build_blog.html">教程</a>。<br>引用下原文对Geek的理解：</p><blockquote><p>Geek更多的是一种精神，一种态度，一种对技术的理解与信念。他们无法忍受丑陋的代码，拙劣的技术。他们思路开阔，技术娴熟，他们不甘平庸，追求完美。他们不会囿于常识，他们敢于突破。在常人眼中，他们不走寻常路，享受各种非主流的技术。但在他们自己眼中，这些又是那么得自然与优美。他们用自己的行为诠释着自己对于技术的理解，用那份固执传达着自己的信念。</p></blockquote><blockquote><p>他们掌握并热爱着技术，叛逆、执着，崇尚自由。</p></blockquote><p>本人非常崇尚这种Geek风格，并努力成为Geek中的一员~</p><p>下面记录下本博客搭建的整个过程~</p><h2 id="博客搭建过程"><a href="#博客搭建过程" class="headerlink" title="博客搭建过程"></a>博客搭建过程</h2><hr><p>开始动手。</p><h3 id="Github入门指南"><a href="#Github入门指南" class="headerlink" title="Github入门指南"></a>Github入门指南</h3><p>请参考<a href="http://blog.csdn.net/duxinfeng2010/article/details/8654690">http://blog.csdn.net/duxinfeng2010/article/details/8654690</a></p><h3 id="使用Github-Pages创建个人博客"><a href="#使用Github-Pages创建个人博客" class="headerlink" title="使用Github Pages创建个人博客"></a>使用Github Pages创建个人博客</h3><p>Github为每一个用户分配了一个二级域名<code>username.github.io</code>，用户为自己的二级域名创建主页很简单，只需要在Github下创建一个名为<code>username.github.io</code>的版本库，并向其master分支提交网站静态页面即可。</p><ul><li>登陆Github，创建一个名为<code>username.github.io</code>的版本库（将username替换成自己的Github账户名）。</li><li>点击Setting，选择一个自己喜欢的模板，最后<strong>点击发布public按钮</strong>。</li><li>耐心等待一段时间（不超过10分钟），登陆<a href="http://username.github.io,会发现自己的个人博客已经生成./">http://username.github.io，会发现自己的个人博客已经生成。</a></li></ul><h3 id="安装Pelican和Markdown"><a href="#安装Pelican和Markdown" class="headerlink" title="安装Pelican和Markdown"></a>安装Pelican和Markdown</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip install pelican<br>pip install markdown<br></code></pre></td></tr></table></figure><h3 id="搭建骨架"><a href="#搭建骨架" class="headerlink" title="搭建骨架"></a>搭建骨架</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> blog<br><span class="hljs-built_in">cd</span> blog<br>pelican-quickstart<br></code></pre></td></tr></table></figure><p>根据提示一步步输入相应的配置项，不知道如何设置的接受默认即可，后续可以通过编辑pelicanconf.py文件更改配置</p><p>以下是生成的目录结构：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs text">blog/<br>├── content              # 存放输入的源文件<br>│   └── (pages)          # 存放手工创建的静态页面<br>├── output               # 生成的输出文件<br>├── develop_server.sh    # 方便开启测试服务器<br>├── Makefile             # 方便管理博客的Makefile<br>├── pelicanconf.py       # 主配置文件<br>└── publishconf.py       # 主发布文件，可删除<br></code></pre></td></tr></table></figure><h3 id="开始写博文"><a href="#开始写博文" class="headerlink" title="开始写博文"></a>开始写博文</h3><p>在content目录下用Markdown语法来写一篇文章，在Windows下，我选择的是<a href="http://markdownpad.com/">MarkdownPad</a>工具来编写md文件。</p><p>文章开头部分需填入Title等信息，例如：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs markdown">Date: 2014-02-16<br>Title: 利用github搭建个人博客<br>Category: Tech<br>Tags: pelican, blog, python<br>Slug: build<span class="hljs-emphasis">_blog</span><br><span class="hljs-emphasis"></span><br></code></pre></td></tr></table></figure><p>写完后，执行以下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">make html<br>make serve<br></code></pre></td></tr></table></figure><p>即可在本机<a href="http://127.0.0.1:8000/">http://127.0.0.1:8000</a>看到效果。接下来就是上传至github生效了，我创建了github文件夹用来保存需上传至github的文件，具体命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> github<br><span class="hljs-built_in">rm</span> -rf *<br><span class="hljs-built_in">cp</span> -r ../output/* .<br>git init<br>git remote add origin https://github.com/brantxiong/brantxiong.github.io.git<br>git add .<br>git commit -m <span class="hljs-string">&#x27;Refresh Blog&#x27;</span><br>git push origin master --force<br></code></pre></td></tr></table></figure><h3 id="个性化"><a href="#个性化" class="headerlink" title="个性化"></a>个性化</h3><hr><h4 id="挑选主题"><a href="#挑选主题" class="headerlink" title="挑选主题"></a>挑选主题</h4><p>安装主题，比如<code>tuxlite_tbs</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/getpelican/pelican-themes.git<br><span class="hljs-built_in">cd</span> pelican-themes<br>pelican-themes -i tuxlite_tbs<br></code></pre></td></tr></table></figure><p>选择主题，在pelicanconf.py中添加</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs conf">THEME = &#x27;tuxlite_tbs&#x27;<br></code></pre></td></tr></table></figure><h4 id="修改细节"><a href="#修改细节" class="headerlink" title="修改细节"></a>修改细节</h4><p>Social展示块我们可能需要新增链接，需要修改<code>pelican-themes/tuxlite_tbs/static/local.css</code>文件，在末尾追加链接即可</p><p>Copyright时间修改则在文件<code>pelican-themes/tuxlite_tbs/templates/base.html</code>中，如将2012改为2014~</p><p>关于About页面，在<code>content\pages</code>目录下增加<code>About.md</code>即可~</p><p>改掉err红色提示：将<code>pelican-themes/tuxlite_tbs/static/pygments.css</code>中的<code>.highlight .err &#123; border: 1px solid #FF0000 &#125; /* Error */ </code>改为：<code>.highlight .err &#123; color: #666666 &#125; /* Error */</code></p><p>删除work-break（会导致代码行号错乱。。。）：<code>pelican-themes/tuxlite_tbs/static/css/bootstrap.min.css</code>中<code>word-break: break-all</code></p><p>改完后执行以下命令更新主题：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> pelican-themes -U tuxlite_tbs<br></code></pre></td></tr></table></figure><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><p>最后附上我的<code>pelicanconf.py</code>配置文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># !/usr/bin/env python</span><br><span class="hljs-comment"># -*- coding: utf-8 -*- #</span><br><br><span class="hljs-keyword">from</span> __future__ <span class="hljs-keyword">import</span> unicode_literals<br><br>    <br>AUTHOR = <span class="hljs-string">u&#x27;Brant Xiong&#x27;</span><br>SITENAME = <span class="hljs-string">u&#x27;Brant Xiong\&#x27;s Blog&#x27;</span><br>SITEURL = <span class="hljs-string">&#x27;http://brantxiong.github.io&#x27;</span><br><br>GITHUB_URL = <span class="hljs-string">&#x27;https://github.com/brantxiong&#x27;</span><br>ARCHIVES_URL = <span class="hljs-string">&#x27;archives.html&#x27;</span><br>ARTICLE_URL = <span class="hljs-string">&#x27;pages/&#123;date:%Y&#125;/&#123;date:%m&#125;/&#123;date:%d&#125;/&#123;slug&#125;.html&#x27;</span><br>ARTICLE_SAVE_AS = <span class="hljs-string">&#x27;pages/&#123;date:%Y&#125;/&#123;date:%m&#125;/&#123;date:%d&#125;/&#123;slug&#125;.html&#x27;</span><br><br>RELATIVE_URLS = <span class="hljs-literal">True</span><br>DEFAULT_PAGINATION = <span class="hljs-number">5</span><br><br>GOOGLE_ANALYTICS = <span class="hljs-string">&#x27;&#x27;</span> <span class="hljs-comment"># Google Track Id</span><br>DISQUS_SITENAME = <span class="hljs-string">&#x27;&#x27;</span> <span class="hljs-comment"># Disqus User Name</span><br><br><br>TIMEZONE = <span class="hljs-string">&#x27;Asia/Shanghai&#x27;</span><br><br>THEME = <span class="hljs-string">&#x27;tuxlite_tbs&#x27;</span><br><br>DEFAULT_LANG = <span class="hljs-string">u&#x27;zh&#x27;</span><br><br>DEFAULT_DATE_FORMAT = <span class="hljs-string">&#x27;%Y-%m-%d&#x27;</span><br><br><span class="hljs-comment"># Feed generation is usually not desired when developing</span><br>FEED_RSS = <span class="hljs-string">&#x27;feeds/all.rss.xml&#x27;</span><br>CATEGORY_FEED_RSS = <span class="hljs-string">&#x27;feeds/%s.rss.xml&#x27;</span><br><span class="hljs-comment"># Blogroll</span><br>LINKS =  ((<span class="hljs-string">&#x27;Google&#x27;</span>, <span class="hljs-string">&#x27;https://www.google.com/ncr&#x27;</span>),<br>  (<span class="hljs-string">&#x27;Python&#x27;</span>, <span class="hljs-string">&#x27;http://python.org/&#x27;</span>),<br> )<br><br><span class="hljs-comment"># Social widget</span><br>SOCIAL = ((<span class="hljs-string">&#x27;Github&#x27;</span>, <span class="hljs-string">&#x27;https://github.com/brantxiong&#x27;</span>),<br>            balabla~<br> )<br></code></pre></td></tr></table></figure><p>写到这里，已经0:52pm 2014-2-14了<del>明天还得上班</del>时间不早了，赶紧休息去了~~嘿嘿~</p>]]></content>
    
    
    
    <tags>
      
      <tag>pelican</tag>
      
      <tag>blog</tag>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
